> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [www.cnblogs.com](https://www.cnblogs.com/zhangboyu/p/7580262.html) 从 Java 8 引入的一个很有趣的特性是 _Optional_ 类。Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException） —— 每个 Java 程序员都非常了解的异常。  

本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空。

Optional 是 Java 实现函数式编程的强劲一步，并且帮助在范式中实现。但是 Optional 的意义显然不止于此。

  
[  
](https://my.oschina.net/u/3635230 "rever4433")

我们从一个简单的用例开始。在 Java 8 之前，任何访问对象方法或属性的调用都可能导致 _NullPointerException_：

```
String isocode = user.getAddress().getCountry().getIsocode().toUpperCase();
```

在这个小示例中，如果我们需要确保不触发异常，就得在访问每一个值之前对其进行明确地检查：

```
if (user != null) {
    Address address = user.getAddress();
    if (address != null) {
        Country country = address.getCountry();
        if (country != null) {
            String isocode = country.getIsocode();
            if (isocode != null) {
                isocode = isocode.toUpperCase();
            }
        }
    }
}
```

你看到了，这很容易就变得冗长，难以维护。

为了简化这个过程，我们来看看用 _Optional_  类是怎么做的。从创建和验证实例，到使用其不同的方法，并与其它返回相同类型的方法相结合，下面是见证 _Optional_ 奇迹的时刻。

  
[  
](https://my.oschina.net/jamesfancy "边城")

**创建 _Optional_  实例**  

------------------------

重申一下，这个类型的对象可能包含值，也可能为空。你可以使用同名方法创建一个空的 Optional。

```
@Test(expected = NoSuchElementException.class)
public void whenCreateEmptyOptional_thenNull() {
    Optional<User> emptyOpt = Optional.empty();
    emptyOpt.get();
}
```

毫不奇怪，尝试访问 _emptyOpt_ 变量的值会导致 _NoSuchElementException_。

你可以使用  _of()_ 和 ofNullable() 方法创建包含值的 _Optional_。两个方法的不同之处在于如果你把 _null_ 值作为参数传递进去，_of()_ 方法会抛出 _NullPointerException_：

```
@Test(expected = NullPointerException.class)
public void whenCreateOfEmptyOptional_thenNullPointerException() {
    Optional<User> opt = Optional.of(user);
}
```

你看，我们并没有完全摆脱 _NullPointerException_。因此，你应该明确对象不为 _null_  的时候使用 _of()_。

如果对象即可能是 _null_ 也可能是非 null，你就应该使用 _ofNullable()_ 方法：

```
Optional<User> opt = Optional.ofNullable(user);
```

  

**访问 _Optional_ 对象的值**

从 _Optional_ 实例中取回实际值对象的方法之一是使用 _get()_ 方法：

```
@Test
public void whenCreateOfNullableOptional_thenOk() {
    String name = "John";
    Optional<String> opt = Optional.ofNullable(name);

    assertEquals("John", opt.get());
}
```

不过，你看到了，这个方法会在值为 _null_ 的时候抛出异常。要避免异常，你可以选择首先验证是否有值：

```
@Test
public void whenCheckIfPresent_thenOk() {
    User user = new User("john@gmail.com", "1234");
    Optional<User> opt = Optional.ofNullable(user);
    assertTrue(opt.isPresent());

    assertEquals(user.getEmail(), opt.get().getEmail());
}
```

检查是否有值的另一个选择是 _ifPresent()_ 方法。该方法除了执行检查，还接受一个 _Consumer(消费者_) 参数，如果对象不是空的，就对执行传入的 Lambda 表达式：

```
opt.ifPresent( u -> assertEquals(user.getEmail(), u.getEmail()));
```

这个例子中，只有 user 用户不为 null 的时候才会执行断言。

接下来，我们来看看提供空值的方法。

  
[  
](https://my.oschina.net/jamesfancy "边城")

### **返回默认值**  

_Optional_ 类提供了 API 用以返回对象值，或者在对象为空的时候返回默认值。

这里你可以使用的第一个方法是 _orElse()_，它的工作方式非常直接，如果有值则返回该值，否则返回传递给它的参数值：

```
@Test
public void whenEmptyValue_thenReturnDefault() {
    User user = null;
    User user2 = new User("anna@gmail.com", "1234");
    User result = Optional.ofNullable(user).orElse(user2);

    assertEquals(user2.getEmail(), result.getEmail());
}
```

这里 _user_ 对象是空的，所以返回了作为默认值的 _user2_。

如果对象的初始值不是 null，那么默认值会被忽略：

```
@Test
public void whenValueNotNull_thenIgnoreDefault() {
    User user = new User("john@gmail.com","1234");
    User user2 = new User("anna@gmail.com", "1234");
    User result = Optional.ofNullable(user).orElse(user2);

    assertEquals("john@gmail.com", result.getEmail());
}
```

第二个同类型的 API 是 _orElseGet()_ —— 其行为略有不同。这个方法会在有值的时候返回值，如果没有值，它会执行作为参数传入的 _Supplier(供应者)_ 函数式接口，并将返回其执行结果：

```
User result = Optional.ofNullable(user).orElseGet( () -> user2);
```

  

**_orElse()_ 和 _orElseGet()_ 的不同之处**

乍一看，这两种方法似乎起着同样的作用。然而事实并非如此。我们创建一些示例来突出二者行为上的异同。

我们先来看看对象为空时他们的行为：

```
@Test
public void givenEmptyValue_whenCompare_thenOk() {
    User user = null
    logger.debug("Using orElse");
    User result = Optional.ofNullable(user).orElse(createNewUser());
    logger.debug("Using orElseGet");
    User result2 = Optional.ofNullable(user).orElseGet(() -> createNewUser());
}

private User createNewUser() {
    logger.debug("Creating New User");
    return new User("extra@gmail.com", "1234");
}
```

上面的代码中，两种方法都调用了 _createNewUser()_ 方法，这个方法会记录一个消息并返回 _User_ 对象。

代码输出如下：

```
Using orElse
Creating New User
Using orElseGet
Creating New User
```

由此可见，当对象为空而返回默认对象时，行为并无差异。

  

我们接下来看一个类似的示例，但这里 _Optional_ 不为空：

```
@Test
public void givenPresentValue_whenCompare_thenOk() {
    User user = new User("john@gmail.com", "1234");
    logger.info("Using orElse");
    User result = Optional.ofNullable(user).orElse(createNewUser());
    logger.info("Using orElseGet");
    User result2 = Optional.ofNullable(user).orElseGet(() -> createNewUser());
}
```

这次的输出：

```
Using orElse
Creating New User
Using orElseGet
```

这个示例中，两个 _Optional_ 对象都包含非空值，两个方法都会返回对应的非空值。不过，_orElse()_ 方法仍然创建了 _User_ 对象。**与之相反，_orElseGet()_ 方法不创建 _**User**_** **对象。**

在执行较密集的调用时，比如调用 Web 服务或数据查询，**这个差异会对性能产生重大影响**。

  

### **返回异常**  

除了 _orElse()_ 和 _orElseGet()_ 方法，Optional 还定义了 _orElseThrow()_ API —— 它会在对象为空的时候抛出异常，而不是返回备选的值：

```
@Test(expected = IllegalArgumentException.class)
public void whenThrowException_thenOk() {
    User result = Optional.ofNullable(user)
      .orElseThrow( () -> new IllegalArgumentException());
}
```

这里，如果 _user_ 值为 null，会抛出 _IllegalArgumentException_。

这个方法让我们有更丰富的语义，可以决定抛出什么样的异常，而不总是抛出 _NullPointerException_。

现在我们已经很好地理解了如何使用 Optional，我们来看看其它可以对 _Optional_ 值进行转换和过滤的方法。

  

**转换值**  

----------

有很多种方法可以转换 _Optional_  的值。我们从 _map()_ 和 _flatMap()_ 方法开始。

先来看一个使用 _map()_ API 的例子：

```
@Test
public void whenMap_thenOk() {
    User user = new User("anna@gmail.com", "1234");
    String email = Optional.ofNullable(user)
      .map(u -> u.getEmail()).orElse("default@gmail.com");

    assertEquals(email, user.getEmail());
}
```

**_map()_ 对值应用 (调用) 作为参数的_函数_，然后将返回的值包装在 _Optional_ 中。**这就使对返回值进行链试调用的操作成为可能 —— 这里的下一环就是 _orElse()_。

相比这下，_flatMap()_ 也需要_函数_作为参数，并对值调用这个函数，然后直接返回结果。

下面的操作中，我们给 _User_ 类添加了一个方法，用来返回 _Optional_：

```
public class User {    
    private String position;

    public Optional<String> getPosition() {
        return Optional.ofNullable(position);
    }

    //...
}
```

既然 getter 方法返回 String 值的 _Optional_，你可以在对 _User_ _的 Optional_ 对象调用 _flatMap()_ 时，用它作为参数。其返回的值是解除包装的 String 值：

```
@Test
public void whenFlatMap_thenOk() {
    User user = new User("anna@gmail.com", "1234");
    user.setPosition("Developer");
    String position = Optional.ofNullable(user)
      .flatMap(u -> u.getPosition()).orElse("default");

    assertEquals(position, user.getPosition().get());
}
```

  

**过滤值**

除了转换值之外，_Optional_  类也提供了按条件 “过滤” 值的方法。

**_filter()_ 接受一个 _Predicate_ 参数**，返回测试结果为 true 的值。如果测试结果为 false，会返回一个空的 _Optional_。

来看一个根据基本的电子邮箱验证来决定接受或拒绝 _User__(用户)_ 的示例：

```
@Test
public void whenFilter_thenOk() {
    User user = new User("anna@gmail.com", "1234");
    Optional<User> result = Optional.ofNullable(user)
      .filter(u -> u.getEmail() != null && u.getEmail().contains("@"));

    assertTrue(result.isPresent());
}
```

如果通过过滤器测试，_result_ 对象会包含非空值。

**_Optional_ 类的链式方法**  

------------------------

为了更充分的使用 _Optional_，你可以链接组合其大部分方法，因为它们都返回相同类似的对象。

我们使用 _Optional_  重写最早介绍的示例。

首先，重构类，使其 getter 方法返回 _Optional_ 引用：

```
public class User {
    private Address address;

    public Optional<Address> getAddress() {
        return Optional.ofNullable(address);
    }

    // ...
}
public class Address {
    private Country country;

    public Optional<Country> getCountry() {
        return Optional.ofNullable(country);
    }

    // ...
}
```

上面的嵌套结构可以用下面的图来表示：

[![](https://images2017.cnblogs.com/blog/782702/201709/782702-20170923094507806-345950041.png)](http://inprogress.baeldung.com/wp-content/uploads/2017/08/user.png)

现在可以删除 _null_ 检查，替换为 _Optional_ 的方法：

```
@Test
public void whenChaining_thenOk() {
    User user = new User("anna@gmail.com", "1234");

    String result = Optional.ofNullable(user)
      .flatMap(u -> u.getAddress())
      .flatMap(a -> a.getCountry())
      .map(c -> c.getIsocode())
      .orElse("default");

    assertEquals(result, "default");
}
```

上面的代码可以通过方法引用进一步缩减：

```
String result = Optional.ofNullable(user)
  .flatMap(User::getAddress)
  .flatMap(Address::getCountry)
  .map(Country::getIsocode)
  .orElse("default");
```

    结果现在的代码看起来比之前采用条件分支的冗长代码简洁多了。

  

**Java 9 增强**  

----------------

我们介绍了 Java 8 的特性，**Java 9 为 Optional 类添加了三个方法：_or()_、_ifPresentOrElse()_ 和 _stream()_。**

_or()_ 方法与 _orElse()_ 和 _orElseGet()_ 类似，它们都在对象为空的时候提供了替代情况。_or()_ 的返回值是由 _Supplier_ 参数产生的另一个 _Optional_ 对象。

如果对象包含值，则 Lambda 表达式不会执行：

```
@Test
public void whenEmptyOptional_thenGetValueFromOr() {
    User result = Optional.ofNullable(user)
      .or( () -> Optional.of(new User("default","1234"))).get();

    assertEquals(result.getEmail(), "default");
}
```

上面的示例中，如果 _user_ 变量是 null，它会返回一个 _Optional_，它所包含的 _User_ 对象，其电子邮件为 “default”。

_ifPresentOrElse()_ 方法需要两个参数：一个 _Consumer_ 和一个 _Runnable_。如果对象包含值，会执行 _Consumer_ 的动作，否则运行 _Runnable_。

[![](https://images2017.cnblogs.com/blog/782702/201709/782702-20170923094508478-458401043.png)](https://my.oschina.net/jamesfancy "边城")[边城](https://my.oschina.net/jamesfancy "边城")翻译于 1 天前0 人顶顶 翻译得不错哦！

如果你想在有值的时候执行某个动作，或者只是跟踪是否定义了某个值，那么这个方法非常有用：

```
Optional.ofNullable(user).ifPresentOrElse( u -> logger.info("User is:" + u.getEmail()),
  () -> logger.info("User not found"));
```

最后介绍的是新的 _stream()_ 方法，它**通过把实例转换为 _Stream_** **对象，**让你从广大的 _Stream_ API 中受益。如果没有值，它会得到空的 _Stream_；有值的情况下，_Stream_ 则会包含单一值。

我们来看一个把 _Optional_ 处理成 _Stream_ 的例子：

```
@Test
public void whenGetStream_thenOk() {
    User user = new User("john@gmail.com", "1234");
    List<String> emails = Optional.ofNullable(user)
      .stream()
      .filter(u -> u.getEmail() != null && u.getEmail().contains("@"))
      .map( u -> u.getEmail())
      .collect(Collectors.toList());

    assertTrue(emails.size() == 1);
    assertEquals(emails.get(0), user.getEmail());
}
```

这里对 _Stream_ 的使用带来了其 _filter()、map()_ 和 _collect()_ 接口，以获取 _List_。

[![](https://images2017.cnblogs.com/blog/782702/201709/782702-20170923094509275-1839284690.png)](https://my.oschina.net/jamesfancy "边城")[边城](https://my.oschina.net/jamesfancy "边城")翻译于 1 天前0 人顶顶 翻译得不错哦！

**_Optional_  应该怎样用？**  

-------------------------

在使用 _Optional_ 的时候需要考虑一些事情，以决定什么时候怎样使用它。

重要的一点是 _**Optional**_ **不是** _**Serializable**_。因此，它不应该用作类的字段。

如果你需要序列化的对象包含 _Optional_ 值，[_Jackson_ 库](https://stackify.com/java-xml-jackson/)支持把 _Optional_ 当作普通对象。也就是说，_Jackson_ 会把空对象看作 _null_，而有值的对象则把其值看作对应域的值。这个功能在 [jackson-modules-java8](https://github.com/FasterXML/jackson-modules-java8) 项目中。

[![](https://images2017.cnblogs.com/blog/782702/201709/782702-20170923094509712-390996092.png)](https://my.oschina.net/jamesfancy "边城")[边城](https://my.oschina.net/jamesfancy "边城")翻译于 1 天前0 人顶顶 翻译得不错哦！

它在另一种情况下也并不怎么有用，就是在将其类型用作方法或构建方法的参数时。这样做会让代码变得复杂，完全没有必要：

```
User user = new User("john@gmail.com", "1234", Optional.empty());
```

使用重载方法来处理非要的参数要容易得多。

**_Optional_ 主要用作返回类型。**在获取到这个类型的实例后，如果它有值，你可以取得这个值，否则可以进行一些替代行为。

_Optional_ 类有一个非常有用的用例，就是将其与流或其它返回 _Optional_ 的方法结合，以**构建流畅的 API**。

我们来看一个示例，使用 _Stream_ 返回 _Optional_ 对象的 _findFirst()_ 方法：

```
@Test
public void whenEmptyStream_thenReturnDefaultOptional() {
    List<User> users = new ArrayList<>();
    User user = users.stream().findFirst().orElse(new User("default", "1234"));

    assertEquals(user.getEmail(), "default");
}
```

[![](https://images2017.cnblogs.com/blog/782702/201709/782702-20170923094510150-1512514334.png)](https://my.oschina.net/jamesfancy "边城")[边城](https://my.oschina.net/jamesfancy "边城")翻译于 1 天前0 人顶顶 翻译得不错哦！

**总结**

_Optional_ 是 Java 语言的有益补充 —— 它旨在减少代码中的 _NullPointerExceptions_，虽然还不能完全消除这些异常。

它也是精心设计，自然融入 Java 8 函数式支持的功能。

总的来说，这个简单而强大的类有助于创建简单、可读性更强、比对应程序错误更少的程序。

  
来源： [https://www.oschina.net/translate/understanding-accepting-and-leveraging-optional-in?lang=chs&page=2#](https://www.oschina.net/translate/understanding-accepting-and-leveraging-optional-in?lang=chs&page=2#)