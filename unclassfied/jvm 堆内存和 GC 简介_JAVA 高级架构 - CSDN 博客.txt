> 本文由 [简悦 SimpRead](http://ksria.com/simpread/) 转码， 原文地址 [blog.csdn.net](https://blog.csdn.net/t4i2b10X4c22nF6A/article/details/109126978)

最近经常遇到 jvm 内存问题，觉得还是有必要整理下 jvm 内存的相关逻辑，这里只描述 jvm 堆内存，对外内存暂不阐述。

jvm 内存简图

![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9ZVVljNjJWSXZFMWRxa0NUR3A5Q3c0ZmhyUFZOZktuaEdEenVFVVhDVHFlOEVmNjZ2UDFpYWRnMGp0dDNQdGs0VXMxRzQ1UWM0TGVrZG5jWGNoSndHdncvNjQw?x-oss-process=image/format,png)

1.  jvm 内存分为堆内存和非堆内存，堆内存分为年轻代、老年代，非堆内存里只有个永久代。
    
2.  年轻代分为生成区（Eden）和幸存区（Survivor），幸存区由 FromSpace 和 Tospace 两部分组成，默认情况下，内存大小比例：Eden：FromSpace：ToSpace 为 8:1:1。
    
3.  堆内存存放的是对象，垃圾收集器回收的就是这里的对象，不同区域的对象根据不同的 GC 算法回收，比如年轻代对应 Minor GC，老年代对应 Major GC。
    
4.  非堆内存即永久代，也称为方法区，存储的是程序运行时长期存活的对象，比如类的元数据、方法、常量、属性等。
    
5.  在 jdk1.8 废弃了永久代，使用元空间（MetaSpace）取而代之，元空间存储的对象与永久代相同，区别是：元空间并不在 jvm 中，使用的是本地内存。
    
6.  #### 为什么移除永久代呢
    

为融合 HotSpot JVM 与 JRockit VM（新 JVM 技术）而做出的改变，因为 JRockit 没有永久代。

#### 分代概念

首先，GC 是 Garbage Collection，即垃圾回收。

新生成的对象首先存放在生成区，当生成区满了，触发 Minor GC，存活下来的对象转移到 Survivor0，即 FromSpace，Survivor0 区满后触发执行 Minor GC，存活对象移动到 Suvivor1 区，即 ToSpace，经过多次 Minor GC 仍然存活的对象转移到老年代。

所以老年代存储的是长期活动的对象，当老年代满了会触发 Major GC。

Minor GC 和 Major GC 是俗称，有些情况下 Major GC 和 Full GC 是等价的，如果出发了 Full GC, 那么所有线程必须等待 GC 完成才能继续（见 GC 分类和算法）。

#### 分代原因

将对象根据存活概率进行分类，对存活时间长的对象，放到固定区，从而减少扫描垃圾时间及 GC 频率。针对分类进行不同的垃圾回收算法，对算法扬长避短。

#### 为什么幸存区分为大小相同的两部分：S0，S1

主要为了解决碎片化，因为回收一部分对象后，剩余对象占用的内存不连续，也就是碎片化，过于严重的话，当前连续的内存不够新对象存放就会触发 GC，这样会提高 GC 的次数，降低性能，当 S0 GC 后存活对象转移到 S1 后存活对象占用的就是连续的内存。

#### GC 分类和相关算法

我们来看下 GC 分类，才能清楚什么时候触发 Full GC、和非 Full GC，GC 大致分为两种：

*   Partial GC：并不收集整个 GC 堆的模式，即可以理解为非 Full GCYoung GC：只收集 young gen 的 GC
    
*   Old GC：只收集 old gen 的 GC。只有 CMS 有这个模式
    
*   Mixed GC：收集整个 young gen 以及部分 old gen 的 GC。只有 G1 有这个模式
    
*   Full GC：收集整个堆，包括 young gen、old gen、perm gen（如果存在的话）等所有部分的模式。
    

上面说的 CMS 和 G1 都是 GC 的算法，相关 GC 算法如下：

1.  Serial GC 算法：Serial Young GC ＋ Serial Old GC （实际上它是全局范围的 Full GC）；
    
2.  Parallel GC 算法：Parallel Young GC ＋ 非并行的 PS MarkSweep GC / 并行的 Parallel Old GC（这俩实际上也是全局范围的 Full GC），选 PS MarkSweep GC 还是 Parallel Old GC 由参数 UseParallelOldGC 来控制；
    
3.  CMS 算法：ParNew（Young）GC + CMS（Old）GC ＋ Full GC for CMS 算法；
    
4.  G1 GC 算法：Young GC + mixed GC（新生代，再加上部分老生代）＋ Full GC for G1 GC 算法（应对 G1 GC 算法某些时候的不赶趟，开销很大）；
    

#### GC 触发条件

*   Young GC：各种 Young GC 触发的条件都是 Eden 区满了。
    
*   Serial Old GC／PS MarkSweep GC／Parallel Old GC：当准备要触发一次 young GC 时，如果发现统计数据说之前 young GC 的平均晋升大小比目前 old gen 剩余的空间大，则不会触发 young GC 而是转为触发 full GC。
    
*   Full GC for CMS：老年代使用比率超过某个值。
    
*   Full GC for G1 GC：Heap 使用比率超过某个值。
    
*   如果有 perm gen 的话，要在 perm gen 分配空间但已经没有足够空间时，也要触发一次 full GC。
    
*   小结：不同算法对应的 GC 回收条件是不同的。
    

*   #### GC 方式
    
     _**标记 - 清除（Mark-Sweep）**_
    

GC 分为两个阶段，标记和清除。首先标记所有可回收的对象，在标记完成后统一回收所有被标记的对象。同时会产生不连续的内存碎片，碎片过多会导致以后程序运行时需要分配较大对象时，无法找到足够的连续内存，而不得已再次触发 GC。

*   红色代表被标记的可回收对象，绿色代表存活对象
    
    ![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9ZVVljNjJWSXZFMWRxa0NUR3A5Q3c0ZmhyUFZOZktuaDJmQ3ZtbXREVzUwVzcxZm1JTG52aWJxSEZrd2NORkFZTWJZRnFGRllUaWNaRDJIRWhjdzZjSndRLzY0MA?x-oss-process=image/format,png)
    
    清除后如下：
    
    ![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9ZVVljNjJWSXZFMWRxa0NUR3A5Q3c0ZmhyUFZOZktuaE9HNGJHZkJORW4xYVptM1RMRkFmUzlFdGUzRlU4RDlmYUJaREp0d0Q3WmFlY2J3R092WlNUUS82NDA?x-oss-process=image/format,png)
    
    _**复制（Copy）**_
    

将内存按容量划分为两块，每次只使用其中一块。当这一块内存用完了，就将存活的对象复制到另一块上，然后再把已使用的内存空间一次清理掉。这样使得每次都是对半个内存区回收，也不用考虑内存碎片问题，简单高效。缺点需要两倍的内存空间。

清除前后如下：

![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9ZVVljNjJWSXZFMWRxa0NUR3A5Q3c0ZmhyUFZOZktuaDNoQWMwaWJ3dTd2WjBnYnN2aFJqdEZ0Z0ZwRUJyOG5MZUhPNVdWSkdwcmxMT3BvV21HaWNJR29RLzY0MA?x-oss-process=image/format,png)![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9ZVVljNjJWSXZFMWRxa0NUR3A5Q3c0ZmhyUFZOZktuaEd1OVBFR0JxZzdQaWJ0dnUyT0h4cnBCMnhBeVR1aE5pY3ZrNkRkaHJlZllPMGdwV2RaNVdEZVNBLzY0MA?x-oss-process=image/format,png)

_**标记 - 整理（Mark-Compact）**_

也分为两个阶段，首先标记可回收的对象，再将存活的对象都向一端移动，然后清理掉边界以外的内存。此方 法避免标记 - 清除算法的碎片问题，同时也避免了复制算法的空间问题。

一般年轻代中执行 GC 后，会有少量的对象存活，就会选用复制算法，只要付出少量的存活对象复制成本就可以 完成收集。而老年代中因为对象存活率高，没有额外过多内存空间分配，就需要使用标记 - 清理或者标记 - 整理算法来进行回收。

清除前后如下：

![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9ZVVljNjJWSXZFMWRxa0NUR3A5Q3c0ZmhyUFZOZktuaEZ6OXRpYlpCbmNONWN2R3pGcEJUWk5oUjZSYjJqVGhGNHdSNzNxemNPY043OUMwdU0ybWdrYlEvNjQw?x-oss-process=image/format,png)![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9ZVVljNjJWSXZFMWRxa0NUR3A5Q3c0ZmhyUFZOZktuaDVoeXVxcktGT1h4VFU3TjlabUFUU01PbEpWYmFUckZnaWJ3VmduZVlQUGZnaWE1U29leU5pYUY4dy82NDA?x-oss-process=image/format,png)

#### GC 算法参数

<table><thead><tr><th width="31">参数</th><th>描述</th></tr></thead><tbody><tr><td width="31">-XX:+UseSerialGC</td><td>串行收集器</td></tr><tr><td width="31">-XX:+UseParallelGC</td><td>并行收集器</td></tr><tr><td width="31">-XX:+UseParallelGCThreads=8</td><td>并行收集器线程数，同时有多少个线程进行垃圾回收，一般与 CPU 数量相等</td></tr><tr><td width="31">-XX:+UseParallelOldGC</td><td>指定老年代为并行收集</td></tr><tr><td width="31">-XX:+UseConcMarkSweepGC</td><td>CMS 收集器（并发收集器）</td></tr><tr><td width="31">-XX:+UseCMSCompactAtFullCollection</td><td>开启内存空间压缩和整理，防止过多内存碎片</td></tr><tr><td width="31">-XX:CMSFullGCsBeforeCompaction=0</td><td>表示多少次 Full GC 后开始压缩和整理，0 表示每次 Full GC 后立即执行压缩和整理</td></tr><tr><td width="31">-XX:CMSInitiatingOccupancyFraction=80%</td><td>表示老年代内存空间使用 80% 时开始执行 CMS 收集，防止过多的 Full GC</td></tr><tr><td width="31">-XX:+UseG1GC</td><td>G1 收集器</td></tr><tr><td>-XX:MaxTenuringThreshold=0</td><td>在年轻代经过几次 GC 后还存活，就进入老年代，0 表示直接进入老年代</td></tr></tbody></table>

#### OOM 原因

1）老年代内存不足：java.lang.OutOfMemoryError:Javaheapspace

2）永久代内存不足：java.lang.OutOfMemoryError:PermGenspace

3）代码 bug，占用内存无法及时回收。

可以通过添加个参数 - XX:+HeapDumpOnOutMemoryError，让虚拟机在出现内存溢出异常时 Dump 出当前的内存堆转储快照以便事后分析。

**- END -**  

==============

```
▐往期推荐 
```

*   [[灵魂拷问]MySQL 面试高频问题 (工程师方向)](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a912bce3d183db640a3ef180877955142724498402bce39e1762c5eb5728e35cdd3b0a1b8&idx=1&mid=2247487682&scene=21&sn=4066323e32a13ce1277d91cbf4b38a63#wechat_redirect)
    
*   [MySQL 三万字精华总结 + 面试 100 问，吊打面试官绰绰有余（收藏系列）](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a932ace3d1a3c74ece76fe433ba2f3a3eee7a2dc35edb67de8fa5d510af94c5a27760382a&idx=1&mid=2247488195&scene=21&sn=fa33ba1b5f67166ab67c6a0fd0ca47e4#wechat_redirect)
    
*   [HashMap 源码分析 - Java8](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a9352ce3d1a4423167dfe9166289b375d224f09eb81bb7b6f1482e0ea98a5c947cc9ebc4e&idx=1&mid=2247488187&scene=21&sn=3c11ea3eaf644f59651cb447966d4e19#wechat_redirect)
    
*   [四种软件架构演进史，会一种就很牛逼了！](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a9352ce3d1a44cb10958269644f56b3857f21f1b23b4e2f4608636eebfb2017e774aa080a&idx=2&mid=2247488187&scene=21&sn=3e3af2188079a563f8a019f4e4652659#wechat_redirect)
    
*   [做技术到底可以做到哪种地步 - 技术为什么越走越窄？](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a9366ce3d1a70f5bcbc265233a54145a0aabd82daf2fbea2689195489c9c9f5ba37bfd308&idx=1&mid=2247488143&scene=21&sn=4bafc06f486e794f57cc50fc8818f51f#wechat_redirect)  
    
*   [JVM 架构体系与 GC 命令小总结](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a9142ce3d185466c8f974e51a51e7eabd244df4892646109a4066332199f44295ac15e712&idx=1&mid=2247487659&scene=21&sn=f1ec836ef1b110859c6441cb0271e72c#wechat_redirect)
    
*   [三分钟彻底弄懂什么是分布式和微服务架构](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a938ace3d1a9cccb83381142661707b99d31dd58ade746447429073ad40d1a0b12e19a856&idx=1&mid=2247488099&scene=21&sn=e2907b5c9410f2515137cd758c9664d3#wechat_redirect)
    
*   [MySQL 三种日志](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a8e40ce3d0756891e58868e9231694e1400ec58c5f0bef21015161a4fbd57ef847d59a0cd&idx=1&mid=2247487401&scene=21&sn=91dda1d8d046497f50b63e2f4fd00399#wechat_redirect)
    
*   [三种 MySQL 大表优化方案](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a8e40ce3d0756f09f5eaebe47365e044daf3897f81e996f7a0b796645e1e849ea85f52cbe&idx=2&mid=2247487401&scene=21&sn=f468fabb92c044ea5ececa369c669e65#wechat_redirect)
    
*   [MySQL 的存储过程原来还可以这样玩？（还不收藏）](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a8e7ace3d076cb27d469856995f6edc96e1f1d60f2094851bf0e5921f9a4a36a829349e82&idx=2&mid=2247487379&scene=21&sn=32d9d57e78b3dd5cf2818d92d0a9f2da#wechat_redirect)
    
*   [架构篇：什么才是真正的架构设计？](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a9116ce3d180041054fc2ae788d5f564fb341374cf0bfbe97b69f34fc1dbfbd3cd2ce5397&idx=1&mid=2247487743&scene=21&sn=d462c85b81e88fca44586d4d2612959e#wechat_redirect)
    
*   [万字总结：学习 MySQL 优化原理，这一篇就够了！](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a90face3d19ec835439efeef4a26748db02e542eb4b625e644ceef4c35794ff6f3f4041ef&idx=1&mid=2247487763&scene=21&sn=4ca56591f9be686ebfce07d5cfe58647#wechat_redirect)
    
*   [深度解析 spring 源码 IOC 原理](http://mp.weixin.qq.com/s?__biz=MzUxNDA1NDI3OA%3D%3D&chksm=f94a90f2ce3d19e49528df97a1b9443d982b5f8b104790b681adf107a418f5d67e218e725b34&idx=2&mid=2247487771&scene=21&sn=75ca5b86185fd81d3da5d21b07ca37d3#wechat_redirect)
    

**![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9ZVVljNjJWSXZFMGljb3N1aWFjNzN4TFNYUURlWWVnWFpUb1dmT0x4amREYjJXckRCV0RTcGI1cEQ2aGNRRVBpYXJLd2JOZ3hQNUFRVGdRSWJjNDJWNHU5dy82NDA?x-oss-process=image/format,png)**

**如果你觉得文章不错，文末的赞 ???? 又回来啦，****记得给我「****点赞****」和「****在看****」哦~**